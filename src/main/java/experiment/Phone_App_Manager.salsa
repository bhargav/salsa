module demo;

/* Phone_App_Manager for Experiment 40
 * This is the app running on the phone.
 * This is revised version of NQueen problem solver used in Experiment 3
 * 
 * Written by Reza Shiftehfar
 */

import  java.util.ArrayList;

behavior Phone_App_Manager{
  static final long serialVersionUID = 4L;

  String name_server;    //the uan address of the name server     e.g. uan://192.168.1.138:3030/
  String phone_theater;  //the rmsp address of the current phone_theater (local as it is where the current code is running) 
  String theater;        //the rmsp address of the theater where worker will be created at e.g. rmsp://192.168.1.138:4040/
                         // if local, include the phone theater again.
  boolean isReporting;   //specifies whether to report the details to output or not
  String report_theater; //the rmsp address of the reporting theater e.g. rmsp://192.168.1.138:4040/
  
  String  status;        //holds the status of phone_app_manager 
  Reporter_Actor reporter_actor;

  int          n;        // Number of N for Nqueens
  int no_workers;        // Number of workers to be used for solving    
  private long startTime, finalTime, total_run_time;

  private Exp_Starter exp_starter = null;



//  private AndroidBatteryLevel androidBatteryLevel;




  public Phone_App_Manager(){
    n = 1;
    no_workers = 1;

    total_run_time    = -1;
    finalTime         = -1;
    startTime         = -1;  
  }

//  void digest(int a, int b){
//     if (a==b)
//        standardOutput<-println("Correct value from read():"+a);
//      else  
//        standardOutput<-println("Wrong value from read():"+a);
//  }

  void start_app(Exp_Starter exp_st, String args[]) {      
      this.setStatus("RUNNING");
      exp_starter = exp_st;

      standardOutput<-println("PHONE_APP: App started.") @
      standardOutput<-println("PHONE_APP: Experiment 50 Ver. 1"); 

      int argc = args.length;
      if (argc<7) { 
          standardOutput<-println("PHONE_APP: Correct call requires following arguments: [name_server] [phone_theater]"+
                                  " [n] [no_worker] [worker_theater] [report on/off] [report_theater]"); 
          this.setStatus("FAILED: Wrong number of initial calling arguments.");
      }       

      name_server = args[0];
      phone_theater =  args[1];  // this is the local location where this current phone_app_manager actor is started.
      n=Integer.parseInt(args[2]);
      no_workers=Integer.parseInt(args[3]);
      theater = args[4];

      if (args[5].equalsIgnoreCase("report_on")) { isReporting = true;}
      else { isReporting = false;}
       
      report_theater = args[6]; 
      reporter_actor = new Reporter_Actor() at ( new UAN( name_server+"reporter"), new UAL( report_theater+"reporter") );
      
      //profiler is currently located at the phone:
      Profiler profiler = new Profiler(isReporting, reporter_actor) at ( new UAN( name_server+"profiler"), new UAL( phone_theater+"profiler") );
      profiler<-start_battery_profiling()@
      profiler<-start_energy_profiling();


      standardOutput<-println("PHONE_APP: NQueen solver started...");
      this.report("Starting Solving of NQueen Problem Experiment");
      startTime= System.currentTimeMillis(); 



      //create the Nqueen solver at theater:
      NQueen_Solver nqueen_solver = new NQueen_Solver() at ( new UAN(name_server+"NQueenSolver"), new UAL(theater+"NQueenSolver") );  
      report("PHONE_APP: NQueen_Solver Calculator created at "+theater);


      nqueen_solver<-start_up(self, n, no_workers, isReporting, reporter_actor);


  }  //end of start_app


  //wrap_up() is called when all calculations are complete:
  void wrap_up(){
      this.endTimer();
      this.setStatus("SUCCESS");
      this.report("PHONE_APP: Phone App. Manager Finished.");
      standardOutput<-println("PHONE_APP: Phone App. Manager Finished."); 

      //Report (runtime,status) to exp_started:
      exp_starter<-wrap_up(total_run_time, status);   
  }



  void report(String msg){
    if (isReporting)
      reporter_actor <- report( msg );
  }


  void setStatus(String m){  status = m; }
  public String getStatus(){ return status; }

  void endTimer(){
     finalTime = System.currentTimeMillis();
     total_run_time = finalTime - startTime; 
  }

  public void dummy(){}
  public void dummy_collectToken(Object[] res){ }

}
