module demo;

behavior AllHelloWorld {
    void hello(){
        standardOutput <- print("Hello ");
    }
    void world(){
        standardOutput <- println("World!");
    }

    void dummy()
    {
    }       

    void pump(HelloWorld1 world, Nqueens nqueen, String[] argNqueens, Fibonacci fib, String[] argFibonacci, int count){
	join{
		world <- helloworld():delay(new Integer(count * 4000));
		nqueen <- act(argNqueens):delay(new Integer(count * 5000));
		//world <- helloworld();
		//nqueen <- act(argNqueens);
	} @
	join{
		fib <- act(argFibonacci):delay(new Integer(count * 6000));
		/*
		Speaker sp1 = new Speaker("s1");
		sp1 <- act(new String[]{"s1"});
		Speaker sp2 = new Speaker("s2");
		sp2 <- act(new String[]{"s2"});
		Chat ch = new Chat();
		ch <- act(new String[]{"s1", "s2"});	
		*/
	} @ dummy();
    }

    void act(String arguments[]){
	int iter = Integer.parseInt(arguments[0]);
	HelloWorld1[] worlds = new HelloWorld1[iter];

	Integer queensArg = iter * 5;
	Integer fibArg = iter * 10;
	
	String argNqueens[] = new String[] {queensArg.toString(), queensArg.toString()};
	String argFibonacci[] = new String[] {fibArg.toString()};
	Nqueens nqueens = new Nqueens();
	Fibonacci fib = new Fibonacci(iter * 4);
	
	for(int i = 0; i < iter; i++)
	{
		worlds[i] = new HelloWorld1();
	}

	int count = 0;
	while(count < iter * 5)
	{
		count++;
		for(int i = 0; i < iter; i++)
		{
/*
			if(i == 0)
			{
				worlds[i] <- helloworld():delay(new Integer(10000));
			 	worlds[i] <- helloworld();
			}
			else
			{
				worlds[i] <- helloworld();
			}

			join {
			worlds[i] <- helloworld():delay(new Integer(4000));
			nqueens <- act(args):delay(new Integer(3000));
			} @ currentContinuation;
			starter <- act(args);
*/
			pump(worlds[i], nqueens, argNqueens, fib, argFibonacci, count);
		}

	}
    }
}
